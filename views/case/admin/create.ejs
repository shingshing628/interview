<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
    <meta name="description" content="layouts, main">
    <meta name="author" content="Tony Chan">
    <title>Create case</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <script type="text/javascript" defer  src="/js/script.js"></script>
</head>

<body>
    <header>
        
    </header>
    <main>
        <p style="display:none" id="user_name"><%=user.username%></p>
        <p style="display:none" id="user_displayname"><%=user?.displayname%></p>
        <form action="/case/create" id="create_form" method="POST" onsubmit="notifyParent()">
            <div style="width:95%;height:100%">
                <div class="mb-3">
                    <label class="form-label">Requester name:</label>
                    <div class="search-container">
                        <input type="text" name="request_user" class="form-control" id="request_user" autocomplete="off" required>
                        <div class="dropdown-custom"></div>
                    </div>
                    <label class="form-label">User ID: (For system user only)</label>
                    <input type="text" name="request_username" class="form-control" id="request_username" autocomplete="off" readonly>
                </div>
                <div class="mb-3 row">
                    <div class="col-sm-6">
                        <label>Department</label>
                        <input type="text" class="form-control" name="department" id='department' autocomplete="off" required>
                    </div>
                    <div class="col-sm-6">
                        <label>Phone number:</label>
                        <input type="text" class="form-control" name="contact_no" id='contact_no' autocomplete="off" required>
                    </div>
                </div>          
                
                <div class="mb-3">
                    <label class="form-label">Location</label>
                    <input type="text" class="form-control" name="location" id='location' autocomplete="off" required>
                </div>
            
                <div class="mb-3">
                    <label class="form-label">Detail</label>
                    <textarea name="task_detail" autocomplete="off" class="form-control" rows="3" required></textarea>
                </div>
                <div class="table-responsive" style="height:200px">
                    <table class="table table-red">
                        <thead>
                            <tr>
                              <th scope="col">Action</th>
                              <th scope="col">Date</th>
                              <th scope="col">Handle By</th>
                            </tr>
                        </thead>
                        <tbody class="table-group-divider" id="table_log">
                            <tr>
                                <td class="table-info">Case created</td>
                                <td class="table-info"><%=new Date(Date.now()).toISOString().split('T')[0]%></td>
                                <td class="table-info"><%=user.displayname%></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div style="display:flex;flex-wrap:nowrap;">
                    <label style="width:120px;margin:auto 0 auto 0">Action log:</label>
                    <input type="text" class="form-control" id="action_toBe_added" autocomplete="off" placeholder="if any">
                    <button type="button" class="btn btn-dark" style="margin-left:20px" onclick="add_log()">Add</button>
                </div>
                <br>

                <label>Urgency:</label>
                    <select name="urgency" class="form-select" aria-label="Default select example">
                        <option value="low" selected>Low</option>
                        <option value="mid">Mid</option>
                        <option value="high">High</option>
                    </select>
                <br>
                <div class="mb-3">
                    <label class="form-label">Summary</label>
                    <textarea name="summary" autocomplete="off" class="form-control" rows="2"></textarea>
                </div>
                <br>
                <div class="mb-3">
                    <label class="form-label">Followed by:</label>
                    <select name="followed_by" id="select_adminlist" onchange="updateHidden(this)"></select>
                    <input type="hidden" id="corresponding_person" name="corresponding_person">
                </div>
                <br>
                <input type="hidden" name="_csrf" value="<%=csrfToken%>">
                <button type="submit" class="btn btn-info" id="submitButton">submit</button>
            </div>
        </form>
    </main>
    <script>
        const populateSelect=async ()=>{
            const select=document.querySelector('#select_adminlist');
            try{
                select.disabled=true;         //Disable during loading
                const response=await fetch('/api/adminlist');
                if(!response.ok){
                    throw new Error('Network response was not ok');
                }
                const data=await response.json();

                select.innerHTML=`<option value="">-Select-</option>`;
                data.forEach((item,index)=>{
                    const option=new Option(item.displayname,item._id);
                    select.add(option);
                });
            }catch(error){
                console.log(error);
                select.innerHTML='<option value="">Error loading data</option>'
            } finally{
                select.disabled=false;
            }
        }
        function updateHidden(select){
            document.querySelector('#corresponding_person').value=select.options[select.selectedIndex].text;
        }   
        
        const searchuser={
            input:null,
            dropdown:null,
            debounceTimer:null,
            selectedIndex:-1,
            result:[],
    
            init(){
                this.input=document.querySelector('#request_user');
                this.dropdown=document.querySelector('.dropdown-custom');
                this.bindEvents();
            },
            bindEvents(){
                this.input.addEventListener('input',(e)=>{
                    clearTimeout(this.debounceTimer);
                    const query=e.target.value.trim();
                    if (query.length<2){
                        this.hideDropdown();
                        return
                    }
                    this.debounceTimer=setTimeout(()=>{
                        this.search(query);
                    },1000)
                });
                // Keyboard navigation
                this.input.addEventListener('keydown', (e) => {
                    switch(e.key) {
                        case 'ArrowDown':
                            e.preventDefault();
                            this.moveSelection(1);
                            break;
                        case 'ArrowUp':
                            e.preventDefault();
                            this.moveSelection(-1);
                            break;
                        case 'Enter':
                            e.preventDefault();
                            this.selectResult();
                            break;
                        case 'Escape':
                            this.hideDropdown();
                            break;
                    }
                });
    
                // Click outside to close
                document.addEventListener('click', (e) => {
                    if (!this.input.contains(e.target) && !this.dropdown.contains(e.target)) {
                        this.hideDropdown();
                    }
                });
            },
    
            async search(query) {
                this.showLoading();
                
                try {
                    // Replace with your API endpoint
                    const response = await fetch(`/api/getuser_info?search=${query}`);
                    // For demonstration, using dummy data
                    this.results = await response.json();
    
                    this.displayResults(query);
                } catch (error) {
                    console.error('Search error:', error);
                    this.showError();
                }
            },
    
            displayResults(query) {
                if (this.results.length === 0) {
                    this.dropdown.innerHTML = '<div class="no-results">No results found</div>';
                    this.showDropdown();
                    return;
                }
    
                const html = this.results.map((result, index) => {
                    const highlightedName = this.highlightMatch(result.username+' ('+result.displayname+')', query);
                    return `
                        <div class="dropdown-item" data-index="${index}">
                            ${highlightedName}
                        </div>
                    `;
                }).join('');
    
                this.dropdown.innerHTML = html;
                this.showDropdown();
    
                // Add click events to items
                this.dropdown.querySelectorAll('.dropdown-item').forEach(item => {
                    item.addEventListener('click', () => {
                        const index = parseInt(item.dataset.index);
                        this.selectedIndex = index;
                        this.selectResult();
                    });
    
                    item.addEventListener('mouseenter', () => {
                        this.selectedIndex = parseInt(item.dataset.index);
                        this.highlightSelected();
                    });
                });
            },
    
            highlightMatch(text, query) {
                const regex = new RegExp(`(${query})`, 'gi');
                return text.replace(regex, '<span class="highlight">$1</span>');
            },
    
            moveSelection(direction) {
                if (!this.dropdown.classList.contains('show')) return;
    
                this.selectedIndex += direction;
    
                if (this.selectedIndex >= this.results.length) {
                    this.selectedIndex = 0;
                } else if (this.selectedIndex < 0) {
                    this.selectedIndex = this.results.length - 1;
                }
    
                this.highlightSelected();
                this.scrollToSelected();
            },
    
            highlightSelected() {
                this.dropdown.querySelectorAll('.dropdown-item').forEach((item, index) => {
                    item.classList.toggle('selected', index === this.selectedIndex);
                });
            },
    
            scrollToSelected() {
                const selected = this.dropdown.querySelector('.selected');
                if (selected) {
                    selected.scrollIntoView({
                        block: 'nearest',
                        behavior: 'smooth'
                    });
                }
            },
    
            selectResult() {
                if (this.selectedIndex >= 0 && this.selectedIndex < this.results.length) {
                    const selected = this.results[this.selectedIndex];
                    this.input.value = selected.displayname;
                    document.querySelector('#request_username').value=selected.username;
                    document.querySelector('#department').value=selected.department;
                    document.querySelector('#contact_no').value=selected.contact_no;
                    document.querySelector('#location').value=selected.location;
                    this.hideDropdown();
                    // Trigger any additional actions here
                }
            },
    
            showLoading() {
                this.dropdown.innerHTML = '<div class="loading">Searching...</div>';
                this.showDropdown();
            },
    
            showError() {
                this.dropdown.innerHTML = '<div class="no-results">Error fetching results</div>';
                this.showDropdown();
            },
    
            showDropdown() {
                this.dropdown.classList.add('show');
            },
    
            hideDropdown() {
                this.dropdown.classList.remove('show');
                this.selectedIndex = -1;
            }
        };
    
        function add_log(){
            try{
                const table_node=document.querySelector('#table_log');
                const tr=document.createElement('tr');
                tr.classList.add('table-warning');
                tr.style.color='red';
                const td1=document.createElement('td');
                const td2=document.createElement('td');
                const td3=document.createElement('td');
                td1.textContent=document.querySelector('#action_toBe_added').value;
                let hidden_input=document.createElement('input');
                hidden_input.type='hidden';
                hidden_input.name='action';
                hidden_input.value=td1.textContent;
                td1.appendChild(hidden_input);
                tr.appendChild(td1);
                td2.textContent='now';
                tr.appendChild(td2);
                td3.textContent=document.querySelector('#user_displayname').textContent;
                tr.appendChild(td3);
                table_node.appendChild(tr);
                document.querySelector('#action_toBe_added').value="";
            }catch(err){
                console.log(err)
            }
        }

        function notifyParent(){
            window.parent.postMessage('createformSubmitted','*');
        }

        function prevent_multi_submit(){
            try{
                const form=document.getElementById('create_form');
                const submitButton=document.getElementById('submitButton');
                form.addEventListener('submit',(e)=>{
                    submitButton.disabled=true;
                })
            }catch(err){
                console.log(err);
            }
        }
        //main
        prevent_multi_submit();
        // admin list fetch data
        populateSelect();
        // Initialize the search field
        searchuser.init();
      
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>


